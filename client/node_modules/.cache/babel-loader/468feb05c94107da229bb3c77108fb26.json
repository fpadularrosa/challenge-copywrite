{"ast":null,"code":"'use strict';\n\nvar iconvLite = require('iconv-lite'); // Load Iconv from an external file to be able to disable Iconv for webpack\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\n\n\nvar Iconv = require('./iconv-loader'); // Expose to the world\n\n\nmodule.exports.convert = convert;\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @param {Boolean} useLite If set to ture, force to use iconvLite\n * @return {Buffer} Encoded string\n */\n\nfunction convert(str, to, from, useLite) {\n  from = checkEncoding(from || 'UTF-8');\n  to = checkEncoding(to || 'UTF-8');\n  str = str || '';\n  var result;\n\n  if (from !== 'UTF-8' && typeof str === 'string') {\n    str = new Buffer(str, 'binary');\n  }\n\n  if (from === to) {\n    if (typeof str === 'string') {\n      result = new Buffer(str);\n    } else {\n      result = str;\n    }\n  } else if (Iconv && !useLite) {\n    try {\n      result = convertIconv(str, to, from);\n    } catch (E) {\n      console.error(E);\n\n      try {\n        result = convertIconvLite(str, to, from);\n      } catch (E) {\n        console.error(E);\n        result = str;\n      }\n    }\n  } else {\n    try {\n      result = convertIconvLite(str, to, from);\n    } catch (E) {\n      console.error(E);\n      result = str;\n    }\n  }\n\n  if (typeof result === 'string') {\n    result = new Buffer(result, 'utf-8');\n  }\n\n  return result;\n}\n/**\n * Convert encoding of a string with node-iconv (if available)\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\n\n\nfunction convertIconv(str, to, from) {\n  var response, iconv;\n  iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n  response = iconv.convert(str);\n  return response.slice(0, response.length);\n}\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\n\n\nfunction convertIconvLite(str, to, from) {\n  if (to === 'UTF-8') {\n    return iconvLite.decode(str, from);\n  } else if (from === 'UTF-8') {\n    return iconvLite.encode(str, to);\n  } else {\n    return iconvLite.encode(iconvLite.decode(str, from), to);\n  }\n}\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\n\n\nfunction checkEncoding(name) {\n  return (name || '').toString().trim().replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').replace(/^ks_c_5601\\-1987$/i, 'CP949').replace(/^us[\\-_]?ascii$/i, 'ASCII').toUpperCase();\n}","map":{"version":3,"names":["iconvLite","require","Iconv","module","exports","convert","str","to","from","useLite","checkEncoding","result","Buffer","convertIconv","E","console","error","convertIconvLite","response","iconv","slice","length","decode","encode","name","toString","trim","replace","toUpperCase"],"sources":["C:/Users/Franco/Documents/Proyectos/CWTech/challenge-copywrite/client/node_modules/encoding/lib/encoding.js"],"sourcesContent":["'use strict';\n\nvar iconvLite = require('iconv-lite');\n// Load Iconv from an external file to be able to disable Iconv for webpack\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\nvar Iconv = require('./iconv-loader');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @param {Boolean} useLite If set to ture, force to use iconvLite\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from, useLite) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n\n    var result;\n\n    if (from !== 'UTF-8' && typeof str === 'string') {\n        str = new Buffer(str, 'binary');\n    }\n\n    if (from === to) {\n        if (typeof str === 'string') {\n            result = new Buffer(str);\n        } else {\n            result = str;\n        }\n    } else if (Iconv && !useLite) {\n        try {\n            result = convertIconv(str, to, from);\n        } catch (E) {\n            console.error(E);\n            try {\n                result = convertIconvLite(str, to, from);\n            } catch (E) {\n                console.error(E);\n                result = str;\n            }\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n\n\n    if (typeof result === 'string') {\n        result = new Buffer(result, 'utf-8');\n    }\n\n    return result;\n}\n\n/**\n * Convert encoding of a string with node-iconv (if available)\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconv(str, to, from) {\n    var response, iconv;\n    iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n    response = iconv.convert(str);\n    return response.slice(0, response.length);\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n        return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n    return (name || '').toString().trim().\n    replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').\n    replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').\n    replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').\n    replace(/^ks_c_5601\\-1987$/i, 'CP949').\n    replace(/^us[\\-_]?ascii$/i, 'ASCII').\n    toUpperCase();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}